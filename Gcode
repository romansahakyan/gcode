# -*- coding: utf-8 -*-
"""
Created on Mon Dec 25 16:08:29 2017

@author: Hayk Vasilyan
"""
# coding: utf-8
# ### 1. Load the Modules
import numpy as np
import matplotlib.pyplot as plt
import os
import geometries as geo
# ### 2. Initial Parameters
# Diameter of the Nozzle
d_nozzle = 0.35
# Set Initial X,Y,Z Possition
position = [0, 0, 0.5]
# Feed-rate / Speed
F = 1000
# Dimensions
length = 80
height = 80
# Temperature of the Nozzle
Temp_C = 220
# Number of layers
n_layeres = 1
# Layer height
h_layer = d_nozzle/2
# Initial extrusion
E = 10
# Extrusion Area
A = (d_nozzle / 2) ** 2 * np.pi
# ### 3. Create file with Start Commands
#####################
#    Create file    #
#####################
# Get your current Directory
path = str(os.getcwd())
file = path + '\LAB-3.gcode'
f = open(file, "w+")
#####################
#    START CODE     #
#####################
f.writelines("G21 ; set units to millimeters\n")
f.writelines("G90 ; use absolute coordinates\n")
f.writelines("M82 ; use absolute distances for extrusion\n")
f.writelines("G28 ; home all axes\n")
f.writelines("G1 Z10 F5000 ; lift nozzle \n")
f.writelines("M109 S%.3f ; set temperature \n" % (Temp_C))
f.writelines("G92 E0 ; zero the extruded length \n")
f.writelines("G1 X0 Y0 Z10 E%.3f ; extrude 10 mm of filament \n" % (E))
f.writelines("G1 X50 Y50 Z10 E%.3f ; extrude 10 mm of filament \n" % (E))

def gcoder(X, Y, Z, F, A, f):
    E = 0
    f.writelines("G92 E0 \n")
    f.writelines("G10 \n")
    f.writelines("G0 X%.5f Y%.5f Z%.5f F%.3f \n" % (X[0], Y[0], Z, F))
    f.writelines("G11 \n")
    for i in range(0, len(X) - 1):
        Distance = np.sqrt((X[i + 1] - X[i]) ** 2 + (Y[i + 1] - Y[i]) ** 2)
        E = E + (Distance * A)
        f.writelines("G1 X%.5f Y%.5f Z%.5f E%.5f \n" % (X[i+1], Y[i+1], Z, E))

# ### 4. Tool-path Generation
x_center = position[0] + length/2
y_center = position[1] + height/2
R = length/2
Z = position[2]
Amplitude = 2
# X_rect, Y_rect = geo.rectangle(position, length, height)
# X_rose, Y_rose = geo.rose(x_center, y_center, 6, R)
# X_circ, Y_circ = geo.circle(x_center, y_center, R)
X_wave1, Y_wave1 = geo.wave(position, Amplitude)
X_wave2, Y_wave2 = X_wave1*(-1) + 2*position[0]+100 , Y_wave1

X_wave, Y_wave = np.concatenate((X_wave1, X_wave2)), np.concatenate((Y_wave1, Y_wave2))

plt.plot(X_wave,Y_wave)

#plt.plot(X_wave1,Y_wave1)
#plt.plot(X_wave2,Y_wave2)

plt.axis("equal")
plt.show()

for i in range(n_layeres):
    # gcoder(X_rose, Y_rose, Z, F, A, f)
    # gcoder(X_circ, Y_circ, Z, F, A, f)
    gcoder(X_wave+20, Y_wave+20, Z, F, A, f) 
    Z += h_layer

# ### 5. Close The File with End codegeo
###############################################################
#     Default End Commands    #
###############################################################
f.writelines("; Finish \n")
f.writelines("M104 S0 ; extruder heater off \n")
f.writelines("M140 S0 ; heated bed heater off (if you have it) \n")
f.writelines("G28 \n")
f.writelines("G90 ; absolute positioning \n")
f.writelines("G1 Y150 F5000 ; move completed part out\n")
f.writelines("M84 ; steppers off \n")
f.close()
#################################################################
